class Ball {
   field int x, y;
   field int radius;
   field int direction;
   field boolean atBoundary;
   field int xMax;
   field int yMax;

   constructor Ball new() {
      let xMax = 510;
      let yMax = 254;
      let radius = Random.between(1, 5);
      let x = Random.between(radius, xMax - radius);
      let y = Random.between(radius, yMax - radius);
      do setNewDirection();
      let atBoundary = false;
      do draw();
      return this;
   }

   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   method void setNewDirection() {
      var int newDirection;
      let newDirection = Random.between(0, 8);
      while (direction = newDirection) { // guarantees new direction differs from original direction
         let newDirection = Random.between(0, 8);
      }
      let direction = newDirection;
      return;
   }

   method void move() {
      if (atBoundary) {
         do setNewDirection();
      }

      if (direction = 0) { 
         let atBoundary = moveUp();
         return;
      }
      if (direction = 1) { 
         let atBoundary = moveDown();
         return;
      }
      if (direction = 2) { 
         let atBoundary = moveLeft();
         return;
      }
      if (direction = 3) { 
         let atBoundary = moveRight();
         return; 
      }
      if (direction = 4) { 
         let atBoundary = moveUpRight();
         return;
      }
      if (direction = 5) { 
         let atBoundary = moveUpLeft();
         return;
      }
      if (direction = 6) { 
         let atBoundary = moveDownRight();
         return;
      }
      if (direction = 7) { 
         let atBoundary = moveDownLeft();
         return;
      }
      return;
   }

   method boolean didTouch(Ball otherBall) {
      var int oX, oY, oRadius, xDist, yDist, totalRadius;
      let totalRadius = radius + otherBall.getRadius();

      let xDist = Math.abs(x - otherBall.getX());
      if (xDist > totalRadius) {
         return false;
      }

      let yDist = Math.abs(y - otherBall.getY());
      if (yDist > totalRadius) {
         return false;
      }

      do setNewDirection();
      do otherBall.setNewDirection();

      return true;
   }

   method void draw() {
      do Screen.setColor(true);
      do Screen.drawCircle(x, y, radius);
      return;
   }

   method void erase() {
      do Screen.setColor(false);
      do Screen.drawCircle(x, y, radius);
      return;
   }

   method boolean moveUp() {
      if (y > radius) {
         do Screen.setColor(false);
         do Screen.drawCircle(x, y, radius);
         let y = y - 1;
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, radius);
         return false;
      }
      return true;
   }

   method boolean moveDown() {
      if ((y + radius) < yMax) {
         do Screen.setColor(false);
         do Screen.drawCircle(x, y, radius);
         let y = y + 1;
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, radius);
         return false;
      }
      return true;
   }

   method boolean moveLeft() {
      if (x > radius) {
         do Screen.setColor(false);
         do Screen.drawCircle(x, y, radius);
         let x = x - 1;
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, radius);
         return false;
      }
      return true;
   }

   method boolean moveRight() {
      if ((x + radius) < xMax) {
         do Screen.setColor(false);
         do Screen.drawCircle(x, y, radius);
         let x = x + 1;
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, radius);
         return false;
      }
      return true;
   }

   method boolean moveUpRight() {
      if (((x + radius) < xMax) & (y > radius)) {
         do Screen.setColor(false);
         do Screen.drawCircle(x, y, radius);
         let x = x + 1;
         let y = y - 1;
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, radius);
         return false;
      }
      return true;
   }

   method boolean moveUpLeft() {
      if ((x > radius) & (y > radius)) {
         do Screen.setColor(false);
         do Screen.drawCircle(x, y, radius);
         let x = x - 1;
         let y = y - 1;
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, radius);
         return false;
      }
      return true;
   }

   method boolean moveDownRight() {
      if (((x + radius) < xMax) & ((y + radius) < yMax)) {
         do Screen.setColor(false);
         do Screen.drawCircle(x, y, radius);
         let x = x + 1;
         let y = y + 1;
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, radius);
         return false;
      }
      return true;
   }

   method boolean moveDownLeft() {
      if ((x > radius) & ((y + radius) < yMax)) {
         do Screen.setColor(false);
         do Screen.drawCircle(x, y, radius);
         let x = x - 1;
         let y = y + 1;
         do Screen.setColor(true);
         do Screen.drawCircle(x, y, radius);
         return false;
      }
      return true;
   }

   method int getX() {
      return x;
   }

   method int getY() {
      return y;
   }

   method int getRadius() {
      return radius;
   }
}
