// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int length, lengthMax;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let length = 0;
        let lengthMax = maxLength;
        let chars = Array.new(lengthMax);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < length) {
            return chars[j];
        }

        do Output.printString("ERROR: charAt() attempt to access non-existent character in string");
        do Sys.error(0);
        return 0;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < lengthMax) {
            let chars[j] = c;
            return;
        }

        do Output.printString("ERROR: setCharAt() attempt to set character beyond string length");
        do Sys.error(0);
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < lengthMax) {
            let chars[length] = c;
            let length = lengthMax + 1;
        } else {
            do Output.printString("ERROR: appendChar() attempt to append beyond string length");
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, n, value, temp;
        var boolean isPositive;

        let value = 0;

        let isPositive = isPositive();
        if (isPositive) {
            let i = 1;
        } else {
            let i = 0;
        }

        while (i < length) {
            let temp = chars[i];
            if ((temp < 48) | (temp > 57)) {
                return String.getValue(isPositive, value);
            }
            let n = String.charToInt(temp);
            let value = (10 * value) + n;
            let i = i + 1;
        }

        return String.getValue(isPositive, value);
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int n) {
        let length = 0;
        if (n < 0) {
            let n = -n;
            do appendChar(45);
        }

        do appendIntChar(n);
        return;
    }

    /** Appends an integer character **/
    method void appendIntChar(int n) {
        var int next;
        if (n < 10) {
            do appendChar(String.intToChar(n));
        } else {
            let next = n / 10;
            do appendIntChar(next);
            do appendChar(String.intToChar(n - (10 * next)));
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }

    /** Returns integer value of a numerical character **/
    function int charToInt(char c) {
        return c - 48;
    }

    /** Returns numerical character of an integer value **/
    function int intToChar(int n) {
        return n + 48;
    }

    /** Tests if the string starts with the negation character **/
    method boolean isPositive () {
        if (chars[0] = 45) {
            return false;
        }
        
        return true;
    }

    /** Returns the value of the string, negating if negative **/
    function int getValue(int value, boolean isPositive) {
        if (isPositive) {
            return value;
        } else {
            return -value;
        }
    }
}
