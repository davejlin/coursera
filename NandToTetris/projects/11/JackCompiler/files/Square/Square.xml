<class>
  <keyword> class </keyword>
  <identifier> Square </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> x </identifier>
    <symbolTableEntry>
      <kind> FIELD </kind>
      <type> int </type>
      <name> x </name>
      <index> 0 </index>
    </symbolTableEntry>
    <symbol> , </symbol>
    <identifier> y </identifier>
    <symbolTableEntry>
      <kind> FIELD </kind>
      <type> int </type>
      <name> y </name>
      <index> 1 </index>
    </symbolTableEntry>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> size </identifier>
    <symbolTableEntry>
      <kind> FIELD </kind>
      <type> int </type>
      <name> size </name>
      <index> 2 </index>
    </symbolTableEntry>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Square </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> Ax </identifier>
      <symbolTableEntry>
        <kind> ARG </kind>
        <type> int </type>
        <name> Ax </name>
        <index> 1 </index>
      </symbolTableEntry>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Ay </identifier>
      <symbolTableEntry>
        <kind> ARG </kind>
        <type> int </type>
        <name> Ay </name>
        <index> 2 </index>
      </symbolTableEntry>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Asize </identifier>
      <symbolTableEntry>
        <kind> ARG </kind>
        <type> int </type>
        <name> Asize </name>
        <index> 3 </index>
      </symbolTableEntry>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> x </identifier>
          <symbolTableEntry>
            <kind> FIELD </kind>
            <type> int </type>
            <name> x </name>
            <index> 0 </index>
          </symbolTableEntry>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ax </identifier>
              <symbolTableEntry>
                <kind> ARG </kind>
                <type> int </type>
                <name> Ax </name>
                <index> 1 </index>
              </symbolTableEntry>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> y </identifier>
          <symbolTableEntry>
            <kind> FIELD </kind>
            <type> int </type>
            <name> y </name>
            <index> 1 </index>
          </symbolTableEntry>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ay </identifier>
              <symbolTableEntry>
                <kind> ARG </kind>
                <type> int </type>
                <name> Ay </name>
                <index> 2 </index>
              </symbolTableEntry>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> size </identifier>
          <symbolTableEntry>
            <kind> FIELD </kind>
            <type> int </type>
            <name> size </name>
            <index> 2 </index>
          </symbolTableEntry>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Asize </identifier>
              <symbolTableEntry>
                <kind> ARG </kind>
                <type> int </type>
                <name> Asize </name>
                <index> 3 </index>
              </symbolTableEntry>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> true </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> x </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> x </name>
                  <index> 0 </index>
                </symbolTableEntry>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> y </name>
                  <index> 1 </index>
                </symbolTableEntry>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> x </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> x </name>
                  <index> 0 </index>
                </symbolTableEntry>
              </term>
              <symbol> + </symbol>
              <term>
                <identifier> size </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> size </name>
                  <index> 2 </index>
                </symbolTableEntry>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> y </name>
                  <index> 1 </index>
                </symbolTableEntry>
              </term>
              <symbol> + </symbol>
              <term>
                <identifier> size </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> size </name>
                  <index> 2 </index>
                </symbolTableEntry>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> erase </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> false </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> x </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> x </name>
                  <index> 0 </index>
                </symbolTableEntry>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> y </name>
                  <index> 1 </index>
                </symbolTableEntry>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> x </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> x </name>
                  <index> 0 </index>
                </symbolTableEntry>
              </term>
              <symbol> + </symbol>
              <term>
                <identifier> size </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> size </name>
                  <index> 2 </index>
                </symbolTableEntry>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> y </name>
                  <index> 1 </index>
                </symbolTableEntry>
              </term>
              <symbol> + </symbol>
              <term>
                <identifier> size </identifier>
                <symbolTableEntry>
                  <kind> FIELD </kind>
                  <type> int </type>
                  <name> size </name>
                  <index> 2 </index>
                </symbolTableEntry>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> incSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                      <symbolTableEntry>
                        <kind> FIELD </kind>
                        <type> int </type>
                        <name> y </name>
                        <index> 1 </index>
                      </symbolTableEntry>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <identifier> size </identifier>
                      <symbolTableEntry>
                        <kind> FIELD </kind>
                        <type> int </type>
                        <name> size </name>
                        <index> 2 </index>
                      </symbolTableEntry>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <integerConstant> 254 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &amp; </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                      <symbolTableEntry>
                        <kind> FIELD </kind>
                        <type> int </type>
                        <name> x </name>
                        <index> 0 </index>
                      </symbolTableEntry>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <identifier> size </identifier>
                      <symbolTableEntry>
                        <kind> FIELD </kind>
                        <type> int </type>
                        <name> size </name>
                        <index> 2 </index>
                      </symbolTableEntry>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <integerConstant> 510 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> erase </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> size </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> size </name>
                <index> 2 </index>
              </symbolTableEntry>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> size </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> size </name>
                    <index> 2 </index>
                  </symbolTableEntry>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> draw </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> decSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> size </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> size </name>
                <index> 2 </index>
              </symbolTableEntry>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> erase </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> size </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> size </name>
                <index> 2 </index>
              </symbolTableEntry>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> size </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> size </name>
                    <index> 2 </index>
                  </symbolTableEntry>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> draw </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveUp </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> y </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> y </name>
                <index> 1 </index>
              </symbolTableEntry>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> y </identifier>
                        <symbolTableEntry>
                          <kind> FIELD </kind>
                          <type> int </type>
                          <name> y </name>
                          <index> 1 </index>
                        </symbolTableEntry>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier> size </identifier>
                        <symbolTableEntry>
                          <kind> FIELD </kind>
                          <type> int </type>
                          <name> size </name>
                          <index> 2 </index>
                        </symbolTableEntry>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> y </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> y </name>
                <index> 1 </index>
              </symbolTableEntry>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> y </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> y </name>
                    <index> 1 </index>
                  </symbolTableEntry>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveDown </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> y </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> y </name>
                    <index> 1 </index>
                  </symbolTableEntry>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> size </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> size </name>
                    <index> 2 </index>
                  </symbolTableEntry>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 254 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> y </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> y </name>
                <index> 1 </index>
              </symbolTableEntry>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> y </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> y </name>
                    <index> 1 </index>
                  </symbolTableEntry>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> y </identifier>
                        <symbolTableEntry>
                          <kind> FIELD </kind>
                          <type> int </type>
                          <name> y </name>
                          <index> 1 </index>
                        </symbolTableEntry>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier> size </identifier>
                        <symbolTableEntry>
                          <kind> FIELD </kind>
                          <type> int </type>
                          <name> size </name>
                          <index> 2 </index>
                        </symbolTableEntry>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> x </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> x </name>
                <index> 0 </index>
              </symbolTableEntry>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> x </identifier>
                        <symbolTableEntry>
                          <kind> FIELD </kind>
                          <type> int </type>
                          <name> x </name>
                          <index> 0 </index>
                        </symbolTableEntry>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier> size </identifier>
                        <symbolTableEntry>
                          <kind> FIELD </kind>
                          <type> int </type>
                          <name> size </name>
                          <index> 2 </index>
                        </symbolTableEntry>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> x </name>
                <index> 0 </index>
              </symbolTableEntry>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> x </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> x </name>
                    <index> 0 </index>
                  </symbolTableEntry>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> x </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> x </name>
                    <index> 0 </index>
                  </symbolTableEntry>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> size </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> size </name>
                    <index> 2 </index>
                  </symbolTableEntry>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 510 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <symbolTableEntry>
                <kind> FIELD </kind>
                <type> int </type>
                <name> x </name>
                <index> 0 </index>
              </symbolTableEntry>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> x </identifier>
                  <symbolTableEntry>
                    <kind> FIELD </kind>
                    <type> int </type>
                    <name> x </name>
                    <index> 0 </index>
                  </symbolTableEntry>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> x </identifier>
                        <symbolTableEntry>
                          <kind> FIELD </kind>
                          <type> int </type>
                          <name> x </name>
                          <index> 0 </index>
                        </symbolTableEntry>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier> size </identifier>
                        <symbolTableEntry>
                          <kind> FIELD </kind>
                          <type> int </type>
                          <name> size </name>
                          <index> 2 </index>
                        </symbolTableEntry>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> x </name>
                      <index> 0 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> y </name>
                      <index> 1 </index>
                    </symbolTableEntry>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> size </identifier>
                    <symbolTableEntry>
                      <kind> FIELD </kind>
                      <type> int </type>
                      <name> size </name>
                      <index> 2 </index>
                    </symbolTableEntry>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
